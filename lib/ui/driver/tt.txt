import 'dart:convert';
import 'dart:math';
import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'package:http/http.dart' as http;
import 'package:geolocator/geolocator.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Import Firebase Auth
import 'auth_service.dart';
import 'firestore_service.dart';
import 'driver_profile.dart';
import 'fuel_efficiency_tips.dart';
import 'fuel_station_details_page.dart';
import 'map_view.dart';
import 'models/fuel_station.dart';
import 'models/fuel_efficiency_tip.dart';
import 'models/station_services.dart';

class DriverHomePage extends StatefulWidget {
  @override
  _DriverHomePageState createState() => _DriverHomePageState();
}

class _DriverHomePageState extends State<DriverHomePage> {
  final AuthService _authService = AuthService();
  final FirestoreService _firestoreService = FirestoreService();
  String searchQuery = '';
  bool isFirstTime = true;
  bool _isProfileLoaded = false;
  LatLng? _currentLocation;

  @override
  void initState() {
    super.initState();
    _checkDriverProfile();
    _showRandomFuelEfficiencyTip();
    _getCurrentLocation();
  }

  Future<void> _checkDriverProfile() async {
    User? currentUser = FirebaseAuth.instance.currentUser; // Get the current user
    if (currentUser != null) {
      Driver? existingDriver = await _firestoreService.getDriverByOwnerId(currentUser.uid);
      if (existingDriver == null) {
        _showDriverProfileDialog();
      } else {
        setState(() {
          _isProfileLoaded = true;
        });
      }
    }
  }

  void _showDriverProfileDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            'Complete Your Profile',
            style: TextStyle(fontSize: 20.0, color: Colors.green),
          ),
          content: Text('Please complete your driver profile to proceed.'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => DriverProfile()),
                );
              },
              child: Text(
                'OK',
                style: TextStyle(color: Colors.green),
              ),
            ),
          ],
          backgroundColor: Colors.green[100],
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(20.0),
          ),
        );
      },
    ).then((value) {
      setState(() {
        _isProfileLoaded = true;
      });
    });
  }

  Future<void> _showRandomFuelEfficiencyTip() async {
    if (isFirstTime) {
      List<FuelEfficiencyTip> tips = await _firestoreService.getFuelEfficiencyTips();
      if (tips.isNotEmpty) {
        FuelEfficiencyTip randomTip = tips[Random().nextInt(tips.length)];

        showDialog(
          context: context,
          builder: (BuildContext context) {
            return AlertDialog(
              backgroundColor: Colors.green[100],
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10.0),
                side: BorderSide(color: Colors.green, width: 2.0),
              ),
              title: Text(
                'Fuel Efficiency Tip',
                style: TextStyle(color: Colors.green[800]),
              ),
              content: Container(
                decoration: BoxDecoration(
                  borderRadius: BorderRadius.circular(8.0),
                  border: Border.all(color: Colors.green, width: 2.0),
                ),
                padding: EdgeInsets.all(16.0),
                child: Text(
                  randomTip.tip,
                  style: TextStyle(fontSize: 16.0),
                ),
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                  child: Text('Close'),
                ),
              ],
            );
          },
        );
      }
      isFirstTime = false;
    }
  }

  Future<void> _getCurrentLocation() async {
    try {
      Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
      setState(() {
        _currentLocation = LatLng(position.latitude, position.longitude);
      });
    } catch (e) {
      print('Error getting location: $e');
    }
  }

  Future<double> calculateRoadDistance(LatLng start, LatLng end) async {
    final String url = 'https://api.mapbox.com/directions/v5/mapbox/driving/${start.longitude},${start.latitude};${end.longitude},${end.latitude}?access_token=YOUR_MAPBOX_ACCESS_TOKEN';

    final response = await http.get(Uri.parse(url));

    if (response.statusCode == 200) {
      final data = json.decode(response.body);

      // Extract distance (in meters)
      final distance = data['routes'][0]['distance'];
      return distance / 1000; // Convert to kilometers
    } else {
      throw Exception('Failed to load directions');
    }
  }

  @override
  Widget build(BuildContext context) {
    if (!_isProfileLoaded || _currentLocation == null) {
      return Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(
          'FUELFINDER',
          style: TextStyle(fontSize: 20.0, color: Colors.green),
        ),
        backgroundColor: Colors.green[100],
        actions: [
          IconButton(
            icon: Icon(Icons.logout),
            onPressed: () {
              _showLogoutConfirmationDialog(context);
            },
          ),
        ],
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.zero,
          children: [
            DrawerHeader(
              decoration: BoxDecoration(color: Colors.grey[100]),
              child: Text(
                'Application',
                style: TextStyle(color: Colors.green, fontSize: 24.0),
              ),
            ),
            ListTile(
              leading: Icon(Icons.person),
              title: Text('Profile'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => DriverProfile()),
                );
              },
            ),
            ListTile(
              leading: Icon(Icons.directions_car),
              title: Text('Fuel Efficiency Tips'),
              onTap: () {
                Navigator.pop(context);
                Navigator.push(
                  context,
                  MaterialPageRoute(builder: (context) => FuelEfficiencyTips()),
                );
              },
            ),
          ],
        ),
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.white, Colors.green[200]!],
          ),
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Text(
                'Welcome, Driver! How is your journey?',
                style: TextStyle(
                  fontSize: 40.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Text(
                'Find nearest fuel station to refill:',
                style: TextStyle(
                  fontSize: 30.0,
                  fontWeight: FontWeight.bold,
                  color: Colors.green,
                ),
              ),
            ),
            Padding(
              padding: const EdgeInsets.symmetric(horizontal: 16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Search Route',
                    style: TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 16.0,
                    ),
                  ),
                  SizedBox(height: 8.0),
                  Container(
                    decoration: BoxDecoration(
                      color: Colors.grey[200],
                      borderRadius: BorderRadius.circular(8.0),
                    ),
                    child: TextField(
                      decoration: InputDecoration(
                        border: InputBorder.none,
                        hintText: 'Enter road code or route',
                        suffixIcon: IconButton(
                          icon: Icon(Icons.search),
                          onPressed: () {
                            setState(() {
                              searchQuery = searchQuery.trim();
                            });
                          },
                        ),
                      ),
                      onChanged: (value) {
                        searchQuery = value;
                      },
                    ),
                  ),
                ],
              ),
            ),
            ElevatedButton(
              onPressed: () async {
                PermissionStatus locationStatus = await Permission.location.request();

                if (locationStatus == PermissionStatus.granted) {
                  Navigator.push(
                    context,
                    MaterialPageRoute(builder: (context) => MapView()),
                  );
                }

                if (locationStatus == PermissionStatus.denied) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('Location permission denied'),
                    ),
                  );
                }

                if (locationStatus == PermissionStatus.permanentlyDenied) {
                  openAppSettings();
                }
              },
              child: Text('Open Map'),
              style: ElevatedButton.styleFrom(
                primary: Colors.green,
              ),
            ),
            Padding(
              padding: const EdgeInsets.all(16.0),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    'Fuel Availability:',
                    style: TextStyle(fontWeight: FontWeight.bold, fontSize: 16),
                  ),
                  SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(Icons.circle, color: Colors.green),
                      SizedBox(width: 8),
                      Text('Available', style: TextStyle(color: Colors.green)),
                    ],
                  ),
                  Row(
                    children: [
                      Icon(Icons.circle, color: Colors.red),
                      SizedBox(width: 8),
                      Text('Not Available', style: TextStyle(color: Colors.red)),
                    ],
                  ),
                  SizedBox(height: 8),
                ],
              ),
            ),
            Expanded(
              child: StreamBuilder<List<FuelStation>>(
                stream: _firestoreService.streamStations(),
                builder: (context, snapshot) {
                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return Center(child: CircularProgressIndicator());
                  }
                  if (!snapshot.hasData || snapshot.data!.isEmpty) {
                    return Center(child: Text('No stations found'));
                  }
                  List<FuelStation> stations = snapshot.data!;
                  if (searchQuery.isNotEmpty) {
                    stations = stations.where((station) => station.location.toLowerCase().contains(searchQuery.toLowerCase())).toList();
                  }
                  return ListView.builder(
                    itemCount: stations.length,
                    itemBuilder: (context, index) {
                      FuelStation station = stations[index];
                      return _buildStationTile(station);
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStationTile(FuelStation station) {
    return FutureBuilder(
      future: Future.wait([
        _firestoreService.getStationServices(station.id),
        calculateRoadDistance(
          _currentLocation!,
          LatLng(station.latitude, station.longitude),
        ),
      ]),
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.waiting) {
          return _buildListTile(station.name, 'Loading...', Colors.grey);
        }
        if (snapshot.hasError) {
          return _buildListTile(station.name, 'Error loading data', Colors.grey);
        }
        final data = snapshot.data as List<dynamic>;
        final StationServices services = data[0];
        final double distance = data[1];

        Color nameColor = Colors.amber;

        return Container(
          decoration: BoxDecoration(
            border: Border(
              bottom: BorderSide(color: Colors.grey[300]!),
            ),
            color: Colors.grey[200],
          ),
          child: ListTile(
            leading: Icon(Icons.local_gas_station),
            title: Text(
              station.name,
              style: TextStyle(color: nameColor, fontWeight: FontWeight.bold),
            ),
            subtitle: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.circle, color: services.isPetrolAvailable ? Colors.green : Colors.red),
                    SizedBox(width: 20),
                    Text('Petrol'),
                    SizedBox(width: 20),
                    Icon(Icons.circle, color: services.isDieselAvailable ? Colors.green : Colors.red),
                    SizedBox(width: 20),
                    Text('Diesel'),
                    SizedBox(width: 20),
                    Text(services.isOpen ? 'Open' : 'Closed'),
                  ],
                ),
                SizedBox(height: 8),
                Text('Distance: ${distance.toStringAsFixed(2)} km'),
                Text(
                  'Location: ${station.location}',
                  style: TextStyle(fontSize: 18.0, fontWeight: FontWeight.bold),
                ),
                SizedBox(height: 12.0),
                Text('Operation Hours: ${station.operationHours}'),
              ],
            ),
            onTap: () {
              Navigator.push(
                context,
                MaterialPageRoute(
                  builder: (context) => FuelStationDetailsPage(station: station),
                ),
              );
            },
          ),
        );
      },
    );
  }

  Widget _buildListTile(String title, String subtitle, Color backgroundColor) {
    return Container(
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey[300]!),
        ),
        color: backgroundColor,
      ),
      child: ListTile(
        title: Text(
          title,
          style: TextStyle(color: Colors.amber, fontWeight: FontWeight.bold),
        ),
        subtitle: Text(subtitle),
      ),
    );
  }

  Future<void> _showLogoutConfirmationDialog(BuildContext context) async {
    return showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text('Logout Confirmation'),
          backgroundColor: Colors.green[100],
          content: Text('Are you sure you want to logout?'),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: Text(
                'Cancel',
                style: TextStyle(color: Colors.red[400]),
              ),
            ),
            TextButton(
              onPressed: () async {
                await _authService.logout();
                Navigator.pushNamed(context, '/login');
              },
              child: Text(
                'Logout',
                style: TextStyle(color: Colors.green),
              ),
            ),
          ],
        );
      },
    );
  }
}





import 'package:flutter/material.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:latlong2/latlong.dart';
import 'package:geolocator/geolocator.dart';
import 'package:ff_main/models/fuel_station.dart';
import 'package:ff_main/services/firestore_service.dart';
import 'package:mapbox_search/mapbox_search.dart';



class MapView extends StatelessWidget {
  MapView({Key? key}) : super(key: key);

  final FirestoreService _firestoreService = FirestoreService();
  final MapController _mapController = MapController();
  final String mapboxApiKey = 'pk.eyJ1IjoiZ2VuaXhsIiwiYSI6ImNsdmtvc2RiNTI2M3Aya256NnB3ajJlczIifQ.7abytkEEOSsAdSFy3QXWQg';

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('FUELFINDER'),
        actions: [
          IconButton(
            icon: Icon(Icons.search),
            onPressed: () async {
              await _searchPlace(context);
            },
          ),
        ],
      ),
      body: FutureBuilder<LatLng>(
        future: _getCurrentLocation(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.waiting) {
            return Center(child: CircularProgressIndicator());
          }

          if (snapshot.hasError) {
            return Center(child: Text('Error fetching location: ${snapshot.error}'));
          }

          LatLng currentLocation = snapshot.data ?? LatLng(51.505, -0.09);

          return StreamBuilder<List<FuelStation>>(
            stream: _firestoreService.streamStationsWithServices(),
            builder: (context, stationSnapshot) {
              if (stationSnapshot.connectionState == ConnectionState.waiting) {
                return Center(child: CircularProgressIndicator());
              }

              if (stationSnapshot.hasError) {
                return Center(child: Text('Error fetching stations: ${stationSnapshot.error}'));
              }

              List<FuelStation> stations = stationSnapshot.data ?? [];

              return Column(
                children: [
                  Container(
                    height: MediaQuery.of(context).size.height / 4,
                    padding: EdgeInsets.all(10),
                    color: Colors.white,
                    child: Column(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          'View nearby stations to refuel',
                          style: TextStyle(fontSize: 20, color: Colors.green),
                          textAlign: TextAlign.center,
                        ),
                        SizedBox(height: 10),
                        Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            IconButton(
                              icon: Icon(Icons.zoom_in, size: 30.0),
                              onPressed: () {
                                _mapController.move(
                                  _mapController.center,
                                  _mapController.zoom + 1,
                                );
                              },
                            ),
                            IconButton(
                              icon: Icon(Icons.zoom_out, size: 30.0),
                              onPressed: () {
                                _mapController.move(
                                  _mapController.center,
                                  _mapController.zoom - 1,
                                );
                              },
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                  Expanded(
                    child: Padding(
                      padding: EdgeInsets.all(10),
                      child: Container(
                        decoration: BoxDecoration(
                          border: Border.all(color: Colors.black),
                          borderRadius: BorderRadius.circular(10),
                        ),
                        child: FlutterMap(
                          mapController: _mapController,
                          options: MapOptions(
                            center: currentLocation,
                            zoom: 13.0,
                          ),
                          children: [
                            TileLayer(
                              urlTemplate:
                                  'https://api.mapbox.com/styles/v1/genixl/clvl3kmme011v01o0gh95hmt4/tiles/256/{z}/{x}/{y}@2x?access_token=pk.eyJ1IjoiZ2VuaXhsIiwiYSI6ImNsdmtvc2RiNTI2M3Aya256NnB3ajJlczIifQ.7abytkEEOSsAdSFy3QXWQg',
                              additionalOptions: {
                                'access token': 'pk.eyJ1IjoiZ2VuaXhsIiwiYSI6ImNsdmtvc2RiNTI2M3Aya256NnB3ajJlczIifQ.7abytkEEOSsAdSFy3QXWQg',
                                'id': 'mapbox.mapbox-streets-v8',
                              },
                            ),
                            MarkerLayer(
                              markers: [
                                Marker(
                                  width: 80.0,
                                  height: 80.0,
                                  point: currentLocation,
                                  child:Container(
                                    child: Column(
                                      mainAxisAlignment: MainAxisAlignment.center,
                                      children: [
                                        Icon(Icons.directions_car, color: Colors.red, size: 40.0),
                                        SizedBox(height: 5.0),
                                        Text(
                                          'Me Driver',
                                          style: TextStyle(color: Colors.red, fontWeight: FontWeight.bold),
                                        ),
                                      ],
                                    ),
                                  ),
                                ),
                                ...stations.map((station) {
                                  LatLng? coordinates = _parseCoordinates(station.gpsLink);

                                  if (coordinates != null) {
                                    return Marker(
                                      width: 150.0,
                                      height: 150.0,
                                      point: coordinates,
                                      child:Container(
                                        child: Column(
                                          crossAxisAlignment: CrossAxisAlignment.start,
                                          children: [
                                            Icon(Icons.local_gas_station, color: Colors.blue, size: 40.0),
                                            SizedBox(height: 2.0),
                                            Text(
                                              '${station.name}',
                                              overflow: TextOverflow.fade,
                                              maxLines: 3,
                                              style: TextStyle(fontSize: 12.0),
                                            ),
                                            SizedBox(height: 5.0),
                                            FutureBuilder<StationServices>(
                                              future: _firestoreService.getStationServices(station.id),
                                              builder: (context, serviceSnapshot) {
                                                if (serviceSnapshot.connectionState == ConnectionState.waiting) {
                                                  return CircularProgressIndicator();
                                                }
                                                if (serviceSnapshot.hasError) {
                                                  return Text('Error loading services');
                                                }
                                                StationServices services = serviceSnapshot.data!;

                                                return Row(
                                                  children: [
                                                    SizedBox(height: 5.0),
                                                    Row(
                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                      children: [
                                                        Icon(Icons.circle, color: services.isPetrolAvailable ? Colors.green : Colors.red),
                                                        SizedBox(width: 5.0),
                                                        Text(
                                                          services.isPetrolAvailable ? 'P' : 'P',
                                                          style: TextStyle(color: services.isPetrolAvailable ? Colors.green : Colors.red),
                                                        ),
                                                      ],
                                                    ),
                                                    SizedBox(height: 5.0),
                                                    Row(
                                                      mainAxisAlignment: MainAxisAlignment.center,
                                                      children: [
                                                        Icon(Icons.circle, color: services.isDieselAvailable ? Colors.green : Colors.red),
                                                        SizedBox(width: 5.0),
                                                        Text(
                                                          services.isDieselAvailable ? 'D' : 'D',
                                                          style: TextStyle(color: services.isDieselAvailable ? Colors.green : Colors.red),
                                                        ),
                                                      ],
                                                    ),
                                                    SizedBox(height: 5.0),
                                                    Text(
                                                      services.isOpen ? ' -Open' : ' -Closed',
                                                      style: TextStyle(color: services.isOpen ? Colors.green : Colors.red),
                                                    ),
                                                  ],
                                                );
                                              },
                                            ),
                                          ],
                                        ),
                                      ),
                                    );
                                  } else {
                                    return Marker(
                                      width: 0.0,
                                      height: 0.0,
                                      point: LatLng(0.0, 0.0),
                                      child:SizedBox.shrink(),
                                    );
                                  }
                                }).toList(),
                              ],
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                ],
              );
            },
          );
        },
      ),
    );
  }


Future<void> _searchPlace(BuildContext context) async {
  var placeSearch = PlaceSearch(
    apiKey: mapboxApiKey,
    limit: 10,
  );

  var predictions = await placeSearch.getPlaces(
    searchHint: 'Search for a place',
  );

  if (predictions != null && predictions.isNotEmpty) {
    var place = predictions.first;
    LatLng? location = await _getLatLngFromPlace(place);

    if (location != null) {
      _mapController.move(location, 14.0);
    }
  }
}

Future<LatLng?> _getLatLngFromPlace(MapBoxPlace place) async {
  try {
    final geometry = place.geometry;
    if (geometry != null && geometry.coordinates != null) {
      return LatLng(
        geometry.coordinates!.latitude,
        geometry.coordinates!.longitude,
      );
    }
  } catch (e) {
    print('Error getting location from place: $e');
  }
  return null;
}
  Future<LatLng> _getCurrentLocation() async {
    try {
      Position position = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
      return LatLng(position.latitude, position.longitude);
    } catch (e) {
      print('Error getting location: $e');
      return LatLng(51.505, -0.09);
    }
  }

  LatLng? _parseCoordinates(String? gpsLink) {
    if (gpsLink != null && gpsLink.isNotEmpty) {
      var coordinates = gpsLink.split(',');
      if (coordinates.length == 2) {
        try {
          double latitude = double.parse(coordinates[0].trim());
          double longitude = double.parse(coordinates[1].trim());
          return LatLng(latitude, longitude);
        } catch (e) {
          print('Error parsing coordinates: $e');
        }
      }
    }
    return null;
  }
}